---
title: "Windows installer with WiX 4 - part 1"
description: "Building a Windows installer with WiX 4 - part 1"
author:
  - name: J-M
    url: {}
date: "2023-03-16"
categories: ["WiX", "installers", ""]
format: 
  html:
    toc: true
engine: knitr
draft: false
---

!["WiX logo"](https://avatars.githubusercontent.com/u/91997072?s=200&v=4 "WiX logo")

# Background

The [software stack for streamflow forecasting](https://github.com/csiro-hydroinformatics/streamflow-forecasting-tools-onboard/) will be made installable on Windows via an installer, with code signing. There are multiple motivations for this, some of it is perceptions and first impressions for new users. More importantly code signing and managed installation are particularly important for some users in an operational environment (hydro-electric production, water management).

I used to produce installable .NET applications way back, but I've lost sight of where the state of play is these days. Besides, the stack is not .NET, so it is sime to revisit the field.

# Quick review and resources

One list of available installation software is via [Wikipedia list of installation software](https://en.wikipedia.org/wiki/List_of_installation_software). Paid options may be in scope if this brings value, but I'll first cover open source or "freeware" types. Prior to this port and _a priori_ I considered:

* [Orca](https://en.wikipedia.org/wiki/Windows_Installer) seems to be the successor of what I used to use (Windows Installer) from Visual Studio way back. 
* [WiX](https://en.wikipedia.org/wiki/WiX) is a FOSS option, and version 4 has release candidates as I write. 
* The venerable [Innosetup](https://jrsoftware.org/isinfo.php).
* [NSIS](https://en.wikipedia.org/wiki/Nullsoft_Scriptable_Install_System) is also a possible candidate. I think the NSIS option was what I previously used  under the hood of what [`electron-builder`](https://www.electron.build/), see [this previous blog post](https://jmp75.github.io/work-blog/posts/20221116-waa-installers/) for context, but I may be wrong about that.

I am partial to trying WiX for this and follow-up post. This is one of the non-proprietary options that produces a Windows Installer.

## WiX

Version 3 of the WiX toolset is mostly [documented](https://wixtoolset.org/docs/wix3) as of March 2023, V4 is understanbly not as well documented. Notwithing this I was still looking for "cheap" options, i.e. adapting from a suitable template, but did not find this kind of resource in the WiX doc. A very good third party resource I found is [WiX Installer Examples](https://github.com/kurtanr/WiXInstallerExamples). It is based in WiX 3 for now, but a resource I am likely to look at even if I trial WiX version 4.

A useful resource to get acquainted with WiX 4, as I write, is a [playlist of coding dojos](https://www.youtube.com/watch?v=x-E7g5H_1TA&list=PLDlzbQXIs18slmqmdlS10_de_Cps-QRg6) (note that episodes are in reverse chronological order) by the [lead developer of WiX, Rob Mensching](https://www.youtube.com/@meschine). The code repository used for the successive sessions may be [here](https://github.com/DeploymentDojo/BeltTest). Note that as these videos were posted weekly, WiX 4 was in preview, so expect that some things there may change, and have changed as we'll see below.

There are new project templates in a Visual Studio extension [Heatwave, by FireGiant](https://www.firegiant.com/wix/heatwave), but for this first post I will probably stick to manually crafting the files. Nevertheless, installing the extension brings some intellisense goodness to Visual Studio, so if you have VS you should install the Heatwave extension.

**For subsequent posts** not this present one: we will likely use the WiX doc section on [code signing for WiX](https://wixtoolset.org/docs/reference/signing/), albeit for version 3. Also, requested a certificate via digicert using  [this procedure](https://docs.digicert.com/en/certcentral/manage-certificates/code-signing-certificates/order-a-code-signing-certificate.html). Note the key length is 3K minimum now.

# Walkthrough

This part one will be the first baby step. While fundamental concepts in installers are not intrinsically complex, I'm scarred enough to appreciate their complicated nature. 

Let's adapt a simple installer as per the dojos, and get one of our compiled software libraries copied. The final installer may look very different (project dependencies, file groups, etc.), but this is a few posts down the track. 

## Windows Sandbox

The dojo playlist has an episode on [Building a windows sandbox](https://youtu.be/mn3pA4ABNtQ?list=PLDlzbQXIs18slmqmdlS10_de_Cps-QRg6). I did not know about this, and this sounds like a very good idea. I will only give the essential steps, checking the video gives more information. Following the [Windows Sandbox MS doc](https://learn.microsoft.com/en-us/windows/security/threat-protection/windows-sandbox/windows-sandbox-overview):

in PowerShell as Administrator : 

::: {.callout-warning}

**CAUTION**: the following powershell admin command below may reboot your machine without asking permission.

```powershell
Enable-WindowsOptionalFeature -FeatureName "Containers-DisposableClientVM" -All -Online
```

:::

Then as per the [Building a windows sandbox](https://youtu.be/mn3pA4ABNtQ?list=PLDlzbQXIs18slmqmdlS10_de_Cps-QRg6) video, setting up a Windows sandbox file and adapting a little bit the [DeploymentDojo/BeltTest](https://github.com/DeploymentDojo/BeltTest) to my context.

```{xml, filename="dojo.wsb"}
<Configuration>
  <MappedFolders>
    <MappedFolder>
      <HostFolder>C:\src\sffs-docs</HostFolder>
      <SandboxFolder>C:\dojo</SandboxFolder>
    </MappedFolder>
  </MappedFolders>
  <LogonCommand>
    <Command>C:\dojo\wip\dojostart.cmd</Command>
  </LogonCommand>
</Configuration>
```

The cmd file has the very same content as the github repo:

```bat
start appwiz.cpl
start "" "C:\dojo"
start "" "C:\Program Files (x86)"
@ rem start regedit
```

`.\dojo.wsb` works fine. 

## Step 1

Starting from [the wsx file in Rob's dojo video](https://youtu.be/IXc6_i0Pm4E?t=933) to adapt to my context:

```xml
<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
  <Package Name="SF" Manufacturer="CSIRO" Version="0.1" UpgradeCode="2e7d7f1d-1111-1111-1111-b363c7ce3a1e">
    <MajorUpgrade DowngradeErrorMessage="A newer version was detected"/>
    <Feature Id="All">
      <Component Directory="InstallFolder">
        <File Source="C:\local\libs\64\swift.dll"/>
      </Component>
    </Feature>
  </Package>
  <StandardDirectory Id="ProgramFilesFolder">
    <Directory Id="InstallFolder" Name="SF">
    </Directory>
  </StandardDirectory>
</Wix>
```

`wix build .\sf.wxs`

error WIX0005: The Wix element contains an unexpected child element 'StandardDirectory'.

On a hunch after [looking at a subsequent version of the code github repo](https://github.com/DeploymentDojo/BeltTest/blob/75829b79027dcbcb559f7da6aff66752517999cf/BeltTest/BeltTestPackage/Folders.wxs), I reckon I should try to put the `StandardDirectory` block inside a `Fragment`. No squigly line anymore in Visual Studio is a good sign.

Then I finally notice that actually I had the `</Fragment>` in the wrong spot. So either:

```xml
<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
  <Package Name="SF" Manufacturer="CSIRO" Version="0.1" UpgradeCode="2e7d7f1d-8a18-47ea-ae43-b363c7ce3a1e">
    <MajorUpgrade DowngradeErrorMessage="A newer version was detected"/>
    <Feature Id="All">
      <Component Directory="InstallFolder">
        <File Source="C:\local\libs\64\swift.dll"/>
      </Component>
    </Feature>
  </Package>
  <Fragment>
    <StandardDirectory Id="ProgramFilesFolder">
      <Directory Id="InstallFolder" Name="SF">
    </Directory>
  </StandardDirectory>
  </Fragment>
</Wix>
```

or more logical for a single XML file package definition:

```xml
<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
  <Package Name="SF" Manufacturer="CSIRO" Version="0.1" UpgradeCode="2e7d7f1d-8a18-47ea-ae43-b363c7ce3a1e">
    <MajorUpgrade DowngradeErrorMessage="A newer version was detected"/>
    <Feature Id="All">
      <Component Directory="InstallFolder">
        <File Source="C:\local\libs\64\swift.dll"/>
      </Component>
    </Feature>
    <StandardDirectory Id="ProgramFilesFolder">
      <Directory Id="InstallFolder" Name="SF">
      </Directory>
    </StandardDirectory>
  </Package>
</Wix>
```

and yes now it builds. At least I have an inkling of the use of Fragment elements in multiple files.

::: {.callout-warning}

Note: I first launched the "Add or Remove Programs" in the sandbox to check the app installation. But it did not show the installed application, with a continuous spinning wheel. You need to open the older interface with `appwiz.cpl` (as in the startup batch file)

:::

# Conclusion

So far so good for baby step 1. To be continued.
