---
title: "Python packaging"
description: "Take stock of the python packaging landscape to refresh practices"
author:
  - name: J-M
    url: {}
date: "2024-08-09"
categories: ["python", "packaging", "template", "practices"]
format: 
  html:
    toc: true
engine: knitr
draft: false
---

# Foreword

This may be a post that will be updated regularly after its initial publication.

# Background

A [repository](https://github.com/csiro-hydroinformatics/efts-python/) with a couple of python packages for the handling of ensemble forecast time series needs a refresh and refactor. It currently uses packaging recipes that were devised quite a few years ago, and need (perhaps) to be reassessed given the zoo of software tools contending for python packaging.

As it stands ["now"](https://github.com/csiro-hydroinformatics/efts-python/tree/9242932363594faaad26711f64e9fb6836de6fdf/efts-io) the packages rely on requirements.txt, [setuptools](https://github.com/csiro-hydroinformatics/efts-python/blob/9242932363594faaad26711f64e9fb6836de6fdf/efts-io/setup.py), pytest, and a few other patterns and practices that may still work but are (alledgedly) superseded.

Some months ago I migrated the [refcount](https://github.com/csiro-hydroinformatics/pyrefcount) package to use poetry. I landed on [some semi-manual recipes](https://github.com/csiro-hydroinformatics/pyrefcount/blob/a76543687ca8f156ad8e0d8d41d39c303cad2e91/docs/tech_notes.md) by adopting and adapting [https://py-pkgs.org](https://py-pkgs.org). I recall I was rather underwhelmed by the added value of poetry in this context; perhaps because the package was not suffering from dependency issues, rife in the Python ecosystem.

A quote from the [Zen of Python](https://en.wikipedia.org/wiki/Zen_of_Python) is "In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never.". Acknowledging I am using it way out of its initial and historical context, the state of python packaging is still at odds with this motto.

Let's first scan in this post what the landscape is these days, with a view to devise one or more (preferably one) packaging template I intend to use and require use of in upcoming projects.

# Related resources

* [How to improve Python packaging, or why fourteen tools are at least twelve too many](https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#how-is-net-better-than-python) and its follow up [Python Packaging, One Year Later: A Look Back at 2023 in Python Packaging](https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later)
* Dan's [Python packaging, dependency management and isolation](https://danmackinlay.name/notebook/python_packaging.html)

* [Scientific Python Library Development Guide](https://learn.scientific-python.org/development)
  * [Task managers](https://learn.scientific-python.org/development/guides/tasks/)
  * [Repo-review](https://learn.scientific-python.org/development/guides/repo-review/)

* Pypa [summaries and links for the most relevant projects in the space of Python installation and packaging.](https://packaging.python.org/en/latest/key_projects/)


# Packaging templates

Some candidates amongst [many](https://www.google.com/search?q=python+project+template):

* [microsoft/python-package-template](https://github.com/microsoft/python-package-template)
* [Kwpolska/python-project-template](https://github.com/Kwpolska/python-project-template)
* [rochacbruno/python-project-template](https://github.com/rochacbruno/python-project-template)
* [an_extremely_modern_and_configurable_python template](https://www.reddit.com/r/Python/comments/1b4qwds/an_extremely_modern_and_configurable_python/)
* [copier-uv](https://pawamoy.github.io/copier-uv/) by the author of `mkdocs`.
* [nbdev](https://nbdev.fast.ai/) may not be thought of as a python packaging template, but in a way it is. See also [a previous post](https://jmp75.github.io/work-blog/posts/20221007-nbdev-windows/) on nbdev.

Other templates internal to my organisation in e.g. the energy domain.

While adopting wholesale a template would be ideal, scaning these options quickly show that they cannot be expected to be a perfect match to our needs. It is worth having a look at options available in various aspects of packaging, to assess whether templates offer a good balance of features versus simplicity of use.

# Options for various aspects of python packaging

## Environment Managers and dependency management

* [venv](https://docs.python.org/3/library/venv.html)
* [virtualenv](https://virtualenv.pypa.io/en/latest/)
* [pyenv](https://github.com/pyenv/pyenv)
* conda, [mamba](https://mamba.readthedocs.io/en/latest/installation/micromamba-installation.html)

* [pip](https://pip.pypa.io/en/latest/)
* [pipx](https://pipx.pypa.io/stable/installation/)

* [uv](https://docs.astral.sh/uv/getting-started/installation/)
* [poetry](https://python-poetry.org/docs/)

## Unit Testing

* pytest
* unittest
* coverage

## Template Installation

* [cookiecutter](https://cookiecutter.readthedocs.io/en/stable/)
* [copier](https://github.com/copier-org/copier)

## Continuous Integration

* GitHub Actions
* Azure
* etc?

## Doc Generation

* [sphinx](https://www.sphinx-doc.org/en/master/)
* [mkdocs](https://www.mkdocs.org/)
* [jupyter-books](https://jupyterbook.org/en/stable/intro.html)
* [quarto](https://quarto.org/) via [quartodoc](https://github.com/machow/quartodoc), and also when using `nbdev`.

## Licensing 

* [pip-licenses](https://pypi.org/project/pip-licenses/)
* license checks ([python-license-check](https://github.com/dhatim/python-license-check)) 
etc.

## Code Quality 

pre-commit hooks

## formatting 

* (autopep8, isort)
* linting (flake8)
* ruff
* black

## Type safety

static type checking (mypy)

## Code Security

Check code for common security flaws.

* bandit

## Containerisation

* docker 

## Cloud Deployment

* terraform

## Data Tracking

* git-lfs 

## Build Tasks

* tox
* nox
* make
* rake
* invoke
* hatch
* doit
* duty
* poethepoet

See also [Configuration and build tools on python wiki](https://wiki.python.org/moin/ConfigurationAndBuildTools)

## Deployment 

* pipx: allows your project to be installed with global launch scripts in a managed, sandboxed virtualenv

# Conclusion

The downside of all these choices is the multitude of templates one can come up with. For better or worse. It is usually not possible to really grasp the pros and cons of tools without a sustain use, and possibly running into a particularly annoying situation such as a broken environment, breaking changes in dependencies, etc. 
