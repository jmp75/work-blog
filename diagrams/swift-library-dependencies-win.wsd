@startuml

left to right direction

skinparam component {
  backgroundColor<<msvcpp_lib>> Yellow
  backgroundColor<<shared lib>> Green
}

component [Boost] as boost
component [NetCDF] as netcdf

note bottom of netcdf
  C API of netCDF, so its 
  runtime can be self-contained
end note

component [jsoncpp] as jsoncpp
component [yaml-cpp] as yamlcpp
' component [tbb] as tbb
component [msvcr120.dll] as msvcr120 <<msvcpp_lib>>
component [msvcr100.dll] as msvcr100 <<msvcpp_lib>>
component [msvcp140_x.dll] as msvcr_py <<msvcpp_lib>>
component [mingw_msvcr.dll] as mingw_msvcr <<msvcpp_lib>>

' frame "header-only" {
'     component [threadpool] as threadpool
'     component [wila] as wila
'     component [cinterop] as cinterop
'     component [numerical-sl-cpp] as numerical_sl_cpp
'     ' component [catch] as catch
'     component [eigen3] as eigen3
' }

component [moirai] as moirai
component [uchronia] as uchronia
component [swift2] as swift2

note top of swift2
  The R and Py packages access 
  the C API, not C++, 
  so their C runtimes can be 
  different versions from swift.dll. 
end note

component [fogss] as fogss

' component [r-uchronia] as r_uchronia
component [r-swift2] as r_swift2
component [r-fogss] as r_fogss

' component [py-uchronia] as py_uchronia
component [py-swift2] as py_swift2
component [py-fogss] as py_fogss


boost --> msvcr120
netcdf --> msvcr100

r_swift2 --> mingw_msvcr
r_fogss --> mingw_msvcr


py_swift2 --> msvcr_py
py_fogss --> msvcr_py

jsoncpp --> msvcr120
yamlcpp --> msvcr120
'  tbb --> msvcr120

moirai --> msvcr120
uchronia --> netcdf
uchronia --> boost
uchronia --> yamlcpp
uchronia --> moirai
swift2 --> uchronia
swift2 --> jsoncpp
fogss --> swift2

' r_uchronia ..> uchronia
' py_uchronia ..> uchronia
' r_uchronia --> mingw_msvcr
' py_uchronia --> msvcr_py

r_swift2 ..> swift2
r_fogss ..> fogss
py_swift2 ..> swift2
py_fogss ..> fogss

@enduml
